{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leand\\\\Desktop\\\\shopper\\\\frontend\\\\src\\\\components\\\\validateButton.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState } from 'react';\nimport { FileContext, AllProductsContext } from '../pages/main';\nimport NewProductsTable from '../components/newProductsTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ValidateButton() {\n  _s();\n  // Estado local para armazenar os novos produtos e se todos estão OK\n  const [allOk, setAllOk] = useState(true);\n  const [newProducts, setNewProducts] = useState([]);\n\n  // Contexto para o arquivo selecionado e todos os produtos existentes\n  const {\n    selectedFile\n  } = useContext(FileContext);\n  const {\n    allProducts\n  } = useContext(AllProductsContext);\n\n  // Função para manipular a validação dos produtos no arquivo CSV\n  const handleValidation = () => {\n    // Verifica se um arquivo foi selecionado\n    if (!selectedFile) {\n      alert('Você deve fazer upload de um arquivo CSV antes de validar.');\n      return;\n    }\n    const reader = new FileReader();\n\n    // Define o que fazer quando o arquivo é lido\n    reader.onload = event => {\n      const csvData = event.target.result;\n      const allLines = csvData.split('\\n').map(line => line.replace(/^\"|\"$/g, '').replace(/\"\\r?$/, ''));\n      const tempNewProducts = [];\n      let areAllOk = true;\n\n      // Itera sobre todas as linhas do arquivo CSV\n      for (let i = 1; i < allLines.length; i++) {\n        const line = allLines[i];\n        const values = line.split(',');\n        const newPrice = parseFloat(values[1]);\n        const productCode = parseInt(values[0]);\n        const productExists = allProducts.some(product => product.code === productCode);\n        let newProduct = {\n          code: productCode,\n          name: '',\n          oldPrice: 0,\n          newPrice: 0,\n          condition: 'Ok'\n        };\n\n        // Verifica se o preço é um valor numérico válido\n        if (isNaN(newPrice)) {\n          newProduct.condition = 'O preço deve estar preenchido e ser um valor numérico válido.';\n          areAllOk = false;\n        }\n\n        // Verifica se o código do produto existe na lista de produtos existentes\n        if (!productExists) {\n          newProduct.condition = `O código do produto ${productCode} não está presente na lista de produtos.`;\n          areAllOk = false;\n        } else {\n          const prevProduct = allProducts.find(product => product.code === productCode);\n          newProduct.name = prevProduct ? prevProduct.name : '';\n          newProduct.oldPrice = prevProduct ? prevProduct.sales_price : 0;\n        }\n        newProduct.newPrice = newPrice;\n        tempNewProducts.push(newProduct);\n      }\n\n      // Atualiza o estado com os novos produtos e se todos estão OK\n      setNewProducts(tempNewProducts);\n      setAllOk(areAllOk);\n    };\n\n    // Lê o arquivo como texto\n    reader.readAsText(selectedFile);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleValidation,\n      children: \"Validar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), newProducts.length > 0 && /*#__PURE__*/_jsxDEV(NewProductsTable, {\n      newProducts: newProducts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 34\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(ValidateButton, \"ZeC6JsCGwx5bJWvzRAwlIkXOUHo=\");\n_c = ValidateButton;\nexport default ValidateButton;\nvar _c;\n$RefreshReg$(_c, \"ValidateButton\");","map":{"version":3,"names":["React","useContext","useState","FileContext","AllProductsContext","NewProductsTable","jsxDEV","_jsxDEV","ValidateButton","_s","allOk","setAllOk","newProducts","setNewProducts","selectedFile","allProducts","handleValidation","alert","reader","FileReader","onload","event","csvData","target","result","allLines","split","map","line","replace","tempNewProducts","areAllOk","i","length","values","newPrice","parseFloat","productCode","parseInt","productExists","some","product","code","newProduct","name","oldPrice","condition","isNaN","prevProduct","find","sales_price","push","readAsText","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/leand/Desktop/shopper/frontend/src/components/validateButton.jsx"],"sourcesContent":["import React, { useContext, useState } from 'react';\r\nimport { FileContext, AllProductsContext } from '../pages/main';\r\nimport NewProductsTable from '../components/newProductsTable';\r\n\r\nfunction ValidateButton() {\r\n  // Estado local para armazenar os novos produtos e se todos estão OK\r\n  const [allOk, setAllOk] = useState(true);\r\n  const [newProducts, setNewProducts] = useState([]);\r\n\r\n  // Contexto para o arquivo selecionado e todos os produtos existentes\r\n  const { selectedFile } = useContext(FileContext);\r\n  const { allProducts } = useContext(AllProductsContext);\r\n\r\n  // Função para manipular a validação dos produtos no arquivo CSV\r\n  const handleValidation = () => {\r\n    // Verifica se um arquivo foi selecionado\r\n    if (!selectedFile) {\r\n      alert('Você deve fazer upload de um arquivo CSV antes de validar.');\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n\r\n    // Define o que fazer quando o arquivo é lido\r\n    reader.onload = (event) => {\r\n      const csvData = event.target.result;\r\n      const allLines = csvData.split('\\n').map(line => line.replace(/^\"|\"$/g, '').replace(/\"\\r?$/, ''));\r\n\r\n      const tempNewProducts = [];\r\n      let areAllOk = true;\r\n\r\n      // Itera sobre todas as linhas do arquivo CSV\r\n      for (let i = 1; i < allLines.length; i++) {\r\n        const line = allLines[i];\r\n        const values = line.split(',');\r\n        const newPrice = parseFloat(values[1]);\r\n        const productCode = parseInt(values[0]);\r\n        const productExists = allProducts.some(product => product.code === productCode);\r\n        \r\n        let newProduct = {\r\n          code: productCode,\r\n          name: '',\r\n          oldPrice: 0,\r\n          newPrice: 0,\r\n          condition: 'Ok'\r\n        };\r\n\r\n        // Verifica se o preço é um valor numérico válido\r\n        if (isNaN(newPrice)) {\r\n          newProduct.condition = 'O preço deve estar preenchido e ser um valor numérico válido.';\r\n          areAllOk = false;\r\n        }\r\n\r\n        // Verifica se o código do produto existe na lista de produtos existentes\r\n        if (!productExists) {\r\n          newProduct.condition = `O código do produto ${productCode} não está presente na lista de produtos.`;\r\n          areAllOk = false;\r\n        } else {\r\n          const prevProduct = allProducts.find(product => product.code === productCode);\r\n          newProduct.name = prevProduct ? prevProduct.name : '';\r\n          newProduct.oldPrice = prevProduct ? prevProduct.sales_price : 0;\r\n        }\r\n\r\n        newProduct.newPrice = newPrice; \r\n        tempNewProducts.push(newProduct);\r\n      }\r\n\r\n      // Atualiza o estado com os novos produtos e se todos estão OK\r\n      setNewProducts(tempNewProducts);\r\n      setAllOk(areAllOk);\r\n    };\r\n\r\n    // Lê o arquivo como texto\r\n    reader.readAsText(selectedFile);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* Botão para iniciar a validação */}\r\n      <button onClick={handleValidation}>Validar</button>\r\n      {/* Renderiza a tabela com os novos produtos se houver */}\r\n      {newProducts.length > 0 && <NewProductsTable newProducts={newProducts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ValidateButton;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}