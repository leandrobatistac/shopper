{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leand\\\\Desktop\\\\shopper\\\\frontend\\\\src\\\\components\\\\validateButton.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { FileContext, AllProductsContext } from '../pages/main';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ValidateButton() {\n  _s();\n  const {\n    selectedFile\n  } = useContext(FileContext);\n  const {\n    allProducts\n  } = useContext(AllProductsContext);\n  const handleValidation = () => {\n    if (!selectedFile) {\n      alert('Você deve fazer upload de um arquivo CSV antes de validar.');\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = event => {\n      const csvData = event.target.result;\n      const allLines = csvData.split('\\n').map(line => line.replace(/^\"|\"$/g, '').replace(/\"\\r?$/, ''));\n      for (let i = 1; i < allLines.length; i++) {\n        const line = allLines[i];\n        const values = line.split(',');\n        const productCode = values[0];\n        const newPrice = values[1];\n        const productExists = allProducts.map(product => typeof product.code);\n        console.log(productExists);\n        console.log(allProducts);\n        if (isNaN(productCode) || isNaN(newPrice)) {\n          alert('Você deve fornecer um arquivo CSV com ambos os campos numéricos, separados por vírgula. (Exemplo: 17,25.50)');\n          return;\n        }\n        if (!productExists) {\n          alert(`O código do produto ${productCode} não está presente na lista de produtos.`);\n          return;\n        }\n      }\n    };\n    reader.readAsText(selectedFile);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleValidation,\n      children: \"Validar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(ValidateButton, \"5LfPTBFprfHMCs3+F+ni8wq47/s=\");\n_c = ValidateButton;\nexport default ValidateButton;\nvar _c;\n$RefreshReg$(_c, \"ValidateButton\");","map":{"version":3,"names":["React","useContext","FileContext","AllProductsContext","jsxDEV","_jsxDEV","ValidateButton","_s","selectedFile","allProducts","handleValidation","alert","reader","FileReader","onload","event","csvData","target","result","allLines","split","map","line","replace","i","length","values","productCode","newPrice","productExists","product","code","console","log","isNaN","readAsText","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/leand/Desktop/shopper/frontend/src/components/validateButton.jsx"],"sourcesContent":["import React, { useContext } from 'react';\r\nimport { FileContext, AllProductsContext } from '../pages/main';\r\n\r\nfunction ValidateButton() {\r\n  const { selectedFile } = useContext(FileContext);\r\n  const { allProducts } = useContext(AllProductsContext);\r\n\r\n  const handleValidation = () => {\r\n    if (!selectedFile) {\r\n      alert('Você deve fazer upload de um arquivo CSV antes de validar.');\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = (event) => {\r\n      const csvData = event.target.result;\r\n      const allLines = csvData.split('\\n').map(line => line.replace(/^\"|\"$/g, '').replace(/\"\\r?$/, ''));\r\n\r\n      for (let i = 1; i < allLines.length; i++) {\r\n        const line = allLines[i];\r\n        const values = line.split(',');\r\n        const productCode = values[0];\r\n        const newPrice = values[1];\r\n        const productExists = allProducts.map(product => typeof product.code);\r\n        console.log(productExists);\r\n    \r\n        console.log(allProducts);\r\n    \r\n        if (isNaN(productCode) || isNaN(newPrice)) {\r\n          alert('Você deve fornecer um arquivo CSV com ambos os campos numéricos, separados por vírgula. (Exemplo: 17,25.50)');\r\n          return;\r\n        }\r\n\r\n        if (!productExists) {\r\n          alert(`O código do produto ${productCode} não está presente na lista de produtos.`);\r\n          return;\r\n        }\r\n      }\r\n    };\r\n    reader.readAsText(selectedFile);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleValidation}>Validar</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ValidateButton;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,WAAW,EAAEC,kBAAkB,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACxB,MAAM;IAAEC;EAAa,CAAC,GAAGP,UAAU,CAACC,WAAW,CAAC;EAChD,MAAM;IAAEO;EAAY,CAAC,GAAGR,UAAU,CAACE,kBAAkB,CAAC;EAEtD,MAAMO,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,IAAI,CAACF,YAAY,EAAE;MACjBG,KAAK,CAAC,4DAA4D,CAAC;MACnE;IACF;IAEA,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,MAAM,GAAIC,KAAK,IAAK;MACzB,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;MACnC,MAAMC,QAAQ,GAAGH,OAAO,CAACI,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;MAEjG,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,QAAQ,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;QACxC,MAAMF,IAAI,GAAGH,QAAQ,CAACK,CAAC,CAAC;QACxB,MAAME,MAAM,GAAGJ,IAAI,CAACF,KAAK,CAAC,GAAG,CAAC;QAC9B,MAAMO,WAAW,GAAGD,MAAM,CAAC,CAAC,CAAC;QAC7B,MAAME,QAAQ,GAAGF,MAAM,CAAC,CAAC,CAAC;QAC1B,MAAMG,aAAa,GAAGpB,WAAW,CAACY,GAAG,CAACS,OAAO,IAAI,OAAOA,OAAO,CAACC,IAAI,CAAC;QACrEC,OAAO,CAACC,GAAG,CAACJ,aAAa,CAAC;QAE1BG,OAAO,CAACC,GAAG,CAACxB,WAAW,CAAC;QAExB,IAAIyB,KAAK,CAACP,WAAW,CAAC,IAAIO,KAAK,CAACN,QAAQ,CAAC,EAAE;UACzCjB,KAAK,CAAC,6GAA6G,CAAC;UACpH;QACF;QAEA,IAAI,CAACkB,aAAa,EAAE;UAClBlB,KAAK,CAAE,uBAAsBgB,WAAY,0CAAyC,CAAC;UACnF;QACF;MACF;IACF,CAAC;IACDf,MAAM,CAACuB,UAAU,CAAC3B,YAAY,CAAC;EACjC,CAAC;EAED,oBACEH,OAAA;IAAA+B,QAAA,eACE/B,OAAA;MAAQgC,OAAO,EAAE3B,gBAAiB;MAAA0B,QAAA,EAAC;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AAEV;AAAClC,EAAA,CA5CQD,cAAc;AAAAoC,EAAA,GAAdpC,cAAc;AA8CvB,eAAeA,cAAc;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}