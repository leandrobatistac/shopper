{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leand\\\\Desktop\\\\shopper\\\\frontend\\\\src\\\\components\\\\validateButton.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState } from 'react';\nimport { FileContext, AllProductsContext } from '../pages/main';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ValidateButton() {\n  _s();\n  const {\n    selectedFile\n  } = useContext(FileContext);\n  const {\n    allProducts\n  } = useContext(AllProductsContext);\n  const [newProducts, setNewProducts] = useState([]);\n  const handleValidation = () => {\n    if (!selectedFile) {\n      alert('Você deve fazer upload de um arquivo CSV antes de validar.');\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = event => {\n      const csvData = event.target.result;\n      const allLines = csvData.split('\\n').map(line => line.replace(/^\"|\"$/g, '').replace(/\"\\r?$/, ''));\n      const tempNewProducts = [];\n      for (let i = 1; i < allLines.length; i++) {\n        const line = allLines[i];\n        const values = line.split(',');\n        const newPrice = parseFloat(values[1]);\n        const productCode = parseInt(values[0]);\n        const productExists = allProducts.some(product => product.code === productCode);\n        if (isNaN(productCode) || isNaN(newPrice)) {\n          alert('Você deve fornecer um arquivo CSV com ambos os campos numéricos, separados por vírgula. (Exemplo: 17,25.50)');\n          return;\n        }\n        if (!productExists) {\n          alert(`O código do produto ${productCode} não está presente na lista de produtos.`);\n          return;\n        }\n        const prevProduct = allProducts.find(product => product.code === productCode);\n        const newProduct = {\n          code: productCode,\n          name: prevProduct.name,\n          oldPrice: prevProduct.sales_price,\n          newPrice: newPrice\n        };\n        tempNewProducts.push(newProduct);\n      }\n      setNewProducts(tempNewProducts);\n    };\n    reader.readAsText(selectedFile);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: newProducts.map((product, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"C\\xF3digo:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this), \" \", product.code, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 54\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Nome:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this), \" \", product.name, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 52\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Pre\\xE7o Antigo:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this), \" R$ \", product.oldPrice, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 67\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Novo Pre\\xE7o:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this), \" R$ \", product.newPrice, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 65\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleValidation,\n      children: \"Validar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(ValidateButton, \"OOB5lbuS8WeM9mW2/QDlUM20kKo=\");\n_c = ValidateButton;\nexport default ValidateButton;\nvar _c;\n$RefreshReg$(_c, \"ValidateButton\");","map":{"version":3,"names":["React","useContext","useState","FileContext","AllProductsContext","jsxDEV","_jsxDEV","ValidateButton","_s","selectedFile","allProducts","newProducts","setNewProducts","handleValidation","alert","reader","FileReader","onload","event","csvData","target","result","allLines","split","map","line","replace","tempNewProducts","i","length","values","newPrice","parseFloat","productCode","parseInt","productExists","some","product","code","isNaN","prevProduct","find","newProduct","name","oldPrice","sales_price","push","readAsText","children","index","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/leand/Desktop/shopper/frontend/src/components/validateButton.jsx"],"sourcesContent":["import React, { useContext, useState } from 'react';\r\nimport { FileContext, AllProductsContext } from '../pages/main';\r\n\r\nfunction ValidateButton() {\r\n  const { selectedFile } = useContext(FileContext);\r\n  const { allProducts } = useContext(AllProductsContext);\r\n  const [newProducts, setNewProducts] = useState([]); \r\n\r\n  const handleValidation = () => {\r\n    if (!selectedFile) {\r\n      alert('Você deve fazer upload de um arquivo CSV antes de validar.');\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = (event) => {\r\n      const csvData = event.target.result;\r\n      const allLines = csvData.split('\\n').map(line => line.replace(/^\"|\"$/g, '').replace(/\"\\r?$/, ''));\r\n\r\n      const tempNewProducts = [];\r\n\r\n      for (let i = 1; i < allLines.length; i++) {\r\n        const line = allLines[i];\r\n        const values = line.split(',');\r\n        const newPrice = parseFloat(values[1]);\r\n        const productCode = parseInt(values[0]);\r\n        const productExists = allProducts.some(product => product.code === productCode);\r\n    \r\n        if (isNaN(productCode) || isNaN(newPrice)) {\r\n          alert('Você deve fornecer um arquivo CSV com ambos os campos numéricos, separados por vírgula. (Exemplo: 17,25.50)');\r\n          return;\r\n        }\r\n\r\n        if (!productExists) {\r\n          alert(`O código do produto ${productCode} não está presente na lista de produtos.`);\r\n          return;\r\n        }\r\n\r\n        const prevProduct = allProducts.find(product => product.code === productCode);\r\n        const newProduct = {\r\n          code: productCode,\r\n          name: prevProduct.name,\r\n          oldPrice: prevProduct.sales_price,\r\n          newPrice: newPrice\r\n        };\r\n        tempNewProducts.push(newProduct);\r\n      }\r\n\r\n      setNewProducts(tempNewProducts);\r\n    };\r\n    reader.readAsText(selectedFile);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <ul>\r\n          {newProducts.map((product, index) => (\r\n            <li key={index}>\r\n              <strong>Código:</strong> {product.code}<br />\r\n              <strong>Nome:</strong> {product.name}<br />\r\n              <strong>Preço Antigo:</strong> R$ {product.oldPrice}<br />\r\n              <strong>Novo Preço:</strong> R$ {product.newPrice}<br />\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <button onClick={handleValidation}>Validar</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ValidateButton;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}